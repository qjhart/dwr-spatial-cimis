* Dynamic vector processing

If we would like to handle dynamic vector processing requests using only the
grass database, then we need to develop a processing plan.  One good possible
method would be to try and develop an input that was close to the current
zipcode processing, so that we could re-use that processing development as
well. This is a pretty easy methodology, and can be created with limited additional
grass development.  Here is a skeleton strategy for this:
** Input Vector
Assume that the web client allows the user to draw a polygon on a map.  When the
user submits the request, some representation of the polygon is submitted to the
grass server.  The inteface supplies a unique identifier for the request, and
polygon, let's say ~tmp_123.geojson~.

** Polygon input
In the case of geojson, the polygon is defined in standard latitude-longitude
coordinates, so you need seperate location to import.  Let's say we have a
location, ~geojson~, and  mapset ~vector_processing~. We import this new vector
there:

#+begin_src bash
    g.mapset -c location=geojson mapset=vector_processing;
    v.in.ogr input=tmp_123.geojson output=tmp_123;
#+end_src

Next, project that into the ~cimis~ location (also with ~vector_processing~
mapset), and then convert that to a raster.  This is similar to the

#+begin_src bash
  g.mapset location=cimis mapset=vector_processing;
  v.proj input=tmp_123 output=tmp_123 location=geojson mapset=vector_processing;
  v.to.rast use=val val=1 type=area input=tmp_123 output=tmp_123
#+end_src

We now have a raster with the valu 1, in the area of the polygon.

#+begin_src grass
  GRASS cimis/vector_processing:vector_processing > r.info tmp_123
 +----------------------------------------------------------------------------+
 | Map:      tmp_123                        Date: Sun Sep 22 11:52:21 2024    |
 | Mapset:   vector_processing              Login of Creator: quinn           |
 | Location: cimis                                                            |
 | DataBase: /home/quinn/dwr-spatial-cimis/gdb                                |
 | Title:    Rasterized vector map from values                                |
 | Timestamp: none                                                            |
 |----------------------------------------------------------------------------|
 |                                                                            |
 |   Type of Map:  raster               Number of Categories: 1               |
 |   Data Type:    CELL                 Semantic label: (none)                |
 |   Rows:         2560                                                       |
 |   Columns:      2304                                                       |
 |   Total Cells:  5898240                                                    |
 |        Projection: Albers Equal Area                                       |
 |            N:     512000    S:    -768000   Res:   500                     |
 |            E:     640000    W:    -512000   Res:   500                     |
 |   Range of data:    min = 1  max = 1                                       |
 |                                                                            |
 |   Data Source:                                                             |
 |    Vector Map: tmp_123                                                     |
 |    Original scale from vector map: 1:1                                     |
 |                                                                            |
 |   Data Description:                                                        |
 |    generated by v.to.rast                                                  |
 |                                                                            |
 |   Comments:                                                                |
 |    v.to.rast input="tmp_123" layer="1" type="area" output="tmp_123" use\   |
 |    ="val" value=1 memory=300                                               |
 |                                                                            |
 +----------------------------------------------------------------------------+
#+end_src

This is equivalent to raster with a single categroy.  Now you can use the same
processing as for the zipcodes, and the ~r.stats~ command.  For example:

#+begin_src bash
  r.stats -n -1 input=tmp_123,Rs@20240719,K@20240719
#+end_src

You can then either remove the tmp_123 files, or save them as a log of the
queries made to the system.
